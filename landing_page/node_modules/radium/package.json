{
  "name": "radium",
  "version": "0.17.1",
  "description": "A set of tools to manage inline styles on React elements",
  "main": "lib/index.js",
  "files": [
    "dist",
    "lib"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/formidablelabs/radium.git"
  },
  "homepage": "https://github.com/formidablelabs/radium",
  "bugs": {
    "url": "https://github.com/formidablelabs/radium/issues"
  },
  "directories": {
    "example": "examples"
  },
  "scripts": {
    "babel": "rimraf lib && babel src/ -d lib/",
    "dist": "webpack && webpack --config=webpack.config.minified.js",
    "examples": "webpack-dev-server --config examples/webpack.config.js --no-info --content-base examples/",
    "deps-fix": "babel-node ./npm-scripts/move-babel-to-dependencies.js",
    "deps-restore": "git checkout package.json",
    "flow": "node -e \"process.exit(process.platform === 'win32' ? 0 : 1)\" || flow check",
    "lib": "npm run babel && rimraf lib/__tests__ lib/__mocks__",
    "lint": "eslint src && npm run flow",
    "postinstall": "cd lib || npm run lib",
    "prepublish": "npm run lib && npm run dist && not-in-publish || (npm test && npm run lint && npm run deps-fix)",
    "postpublish": "npm run deps-restore",
    "start": "./node_modules/.bin/babel-node examples/server.js",
    "test": "karma start",
    "test-coverage": "karma start karma.conf.coverage.js",
    "test-ie": "karma start karma.conf.ie.js",
    "test-dev": "karma start --no-single-run --auto-watch",
    "universal": "concurrent --kill-others \"npm start\" \"npm run examples\""
  },
  "license": "MIT",
  "dependencies": {
    "array-find": "^1.0.0",
    "exenv": "^1.2.0",
    "inline-style-prefixer": "^1.0.3",
    "rimraf": "^2.4.0"
  },
  "devDependencies": {
    "babel-eslint": "^6.0.0",
    "babel-loader": "^6.2.0",
    "chai": "^3.0.0",
    "color": "^0.11.1",
    "concurrently": "^1.0.0",
    "coveralls": "^2.11.2",
    "eslint": "^2.5.3",
    "eslint-plugin-flow-vars": "^0.2.1",
    "eslint-plugin-react": "^4.2.3",
    "express": "^4.13.3",
    "express-http-proxy": "^0.6.0",
    "flow-bin": "^0.20.1",
    "in-publish": "^2.0.0",
    "inject-loader": "^2.0.0",
    "isparta-loader": "^2.0.0",
    "karma": "^0.13.3",
    "karma-babel-preprocessor": "^6.0.1",
    "karma-coverage": "^0.5.3",
    "karma-ie-launcher": "^0.2.0",
    "karma-mocha": "^0.2.0",
    "karma-mocha-reporter": "^1.1.4",
    "karma-phantomjs-launcher": "^1.0.0",
    "karma-phantomjs-shim": "^1.0.0",
    "karma-sinon-chai": "^1.0.0",
    "karma-webpack": "^1.7.0",
    "lodash.merge": "^4.0.2",
    "lolex": "^1.4.0",
    "mocha": "^2.2.5",
    "node-libs-browser": "^0.5.2",
    "nodemon": "^1.4.1",
    "object-assign": "^4.0.1",
    "phantomjs-prebuilt": "^2.1.7",
    "react": "^0.14.0",
    "react-addons-test-utils": "^0.14.0",
    "react-dom": "^0.14.0",
    "sinon": "^1.15.3",
    "sinon-chai": "^2.8.0",
    "webpack": "^1.9.11",
    "webpack-dev-server": "^1.9.0",
    "babel-cli": "^6.3.15",
    "babel-core": "^6.3.15",
    "babel-plugin-add-module-exports": "^0.1.1",
    "babel-plugin-transform-decorators-legacy": "^1.2.0",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.7.4",
    "babel-preset-es2015-loose": "^6.1.3",
    "babel-preset-react": "^6.3.13",
    "babel-preset-stage-1": "^6.3.13"
  },
  "readme": "[![Travis Status][trav_img]][trav_site]\n[![AppVeyor Status][appveyor_img]][appveyor_site]\n[![Coverage Status][cov_img]][cov_site]\n[![NPM Package][npm_img]][npm_site]\n[![Dependency Status][david_img]][david_site]\n![gzipped size][size_img]\n\n# Radium\n\n```\nnpm install radium\n```\n\nRadium is a set of tools to manage inline styles on React elements. It gives you powerful styling capabilities without CSS.\n\n_Inspired by_ <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in JS</a>\nby <a href=\"https://twitter.com/Vjeux\">vjeux</a>.\n\n## Overview\n\nEliminating CSS in favor of inline styles that are computed on the fly is a powerful approach, providing a number of benefits over traditional CSS:\n\n- Scoped styles without selectors\n- Avoids specificity conflicts\n- Source order independence\n- Dead code elimination\n- Highly expressive\n\nDespite that, there are some common CSS features and techniques that inline styles don't easily accommodate: media queries, browser states (:hover, :focus, :active) and modifiers (no more .btn-primary!). Radium offers a standard interface and abstractions for dealing with these problems.\n\nWhen we say expressive, we mean it: math, concatenation, regex, conditionals, functionsâ€“JavaScript is at your disposal. Modern web applications demand that the display changes when data changes, and Radium is here to help.\n\nFor a short technical explanation, see [How does Radium work?](#how-does-radium-work).\n\nConvinced about CSS in JS with React, but not Radium? Check out our comprehensive [comparison of 14+ alternatives][docs_comparison].\n\n## Features\n\n* Conceptually simple extension of normal inline styles\n* Browser state styles to support `:hover`, `:focus`, and `:active`\n* Media queries\n* Automatic vendor prefixing\n* Keyframes animation helper\n* ES6 class and `createClass` support\n\n## Docs\n\n- [Overview][docs_guides]\n- [API Docs][docs_api]\n- [Frequently Asked Questions (FAQ)][docs_faq]\n\n## Usage\n\nStart by adding the `@Radium` decorator to your component class. Alternatively, wrap `Radium()` around your component, like `module.exports = Radium(Component)`, or `Component = Radium(Component)`, which works with classes, `createClass`, and stateless components (functions that take props and return a ReactElement). Then, write a style object as you normally would with inline styles, and add in styles for interactive states and media queries. Pass the style object to your component via `style={...}` and let Radium do the rest!\n\n```jsx\n<Button kind=\"primary\">Radium Button</Button>\n```\n\n```jsx\nvar Radium = require('radium');\nvar React = require('react');\nvar color = require('color');\n\n@Radium\nclass Button extends React.Component {\n  static propTypes = {\n    kind: React.PropTypes.oneOf(['primary', 'warning']).isRequired\n  };\n\n  render() {\n    // Radium extends the style attribute to accept an array. It will merge\n    // the styles in order. We use this feature here to apply the primary\n    // or warning styles depending on the value of the `kind` prop. Since its\n    // all just JavaScript, you can use whatever logic you want to decide which\n    // styles are applied (props, state, context, etc).\n    return (\n      <button\n        style={[\n          styles.base,\n          styles[this.props.kind]\n        ]}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n\n// You can create your style objects dynamically or share them for\n// every instance of the component.\nvar styles = {\n  base: {\n    color: '#fff',\n\n    // Adding interactive state couldn't be easier! Add a special key to your\n    // style object (:hover, :focus, :active, or @media) with the additional rules.\n    ':hover': {\n      background: color('#0074d9').lighten(0.2).hexString()\n    }\n  },\n\n  primary: {\n    background: '#0074D9'\n  },\n\n  warning: {\n    background: '#FF4136'\n  }\n};\n```\n\n## Examples\n\nTo see the universal examples:\n\n```\nnpm install\nnpm run universal\n```\n\nTo see local client-side only examples in action, do this:\n\n```\nnpm install\nnpm run examples\n```\n\n## How does Radium work?\n\nFollowing is a short technical explanation of Radium's inner workings:\n\n- Wrap the `render` function\n- Recurse into the result of the original `render`\n- For each element:\n  - Add handlers to props if interactive styles are specified, e.g. `onMouseEnter` for `:hover`, wrapping existing handlers if necessary\n  - If any of the handlers are triggered, e.g. by hovering, Radium calls `setState` to update a Radium-specific field on the components state object\n  - On re-render, resolve any interactive styles that apply, e.g. `:hover`, by looking up the element's key or ref in the Radium-specific state\n\n## Contributing\n\nPlease see [CONTRIBUTING](CONTRIBUTING.md)\n\n[trav_img]: https://api.travis-ci.org/FormidableLabs/radium.svg\n[trav_site]: https://travis-ci.org/FormidableLabs/radium\n[cov_img]: https://img.shields.io/coveralls/FormidableLabs/radium.svg\n[cov_site]: https://coveralls.io/r/FormidableLabs/radium\n[npm_img]: https://img.shields.io/npm/v/radium.svg\n[npm_site]: https://www.npmjs.org/package/radium\n[david_img]: https://img.shields.io/david/FormidableLabs/radium.svg\n[david_site]: https://david-dm.org/FormidableLabs/radium\n[size_img]: https://badges.herokuapp.com/size/npm/radium/dist/radium.min.js?gzip=true&label=gzipped\n[docs_comparison]: https://github.com/FormidableLabs/radium/tree/master/docs/comparison\n[docs_guides]: https://github.com/FormidableLabs/radium/tree/master/docs/guides\n[docs_api]: https://github.com/FormidableLabs/radium/tree/master/docs/api\n[docs_faq]: https://github.com/FormidableLabs/radium/tree/master/docs/faq\n[appveyor_img]: https://ci.appveyor.com/api/projects/status/github/formidablelabs/radium?branch=master&svg=true\n[appveyor_site]: https://ci.appveyor.com/project/ryan-roemer/radium\n",
  "readmeFilename": "README.md",
  "_id": "radium@0.17.1",
  "_from": "radium@"
}
